<html
    window-resizable="true"
    window-width="600dip"
    window-height="400dip"
>
<head>
<title>sciter utils demo</title>
<style>

@import url(node_modules/sciter-logger/src/logger.css);

body {
    border-spacing: 1em;
}

plaintext#logger {
    size: *;
}

</style>
<script type="module">

import Logger from "node_modules/sciter-logger/src/logger.js";

import * as Utils from "src/utils.js";

// initialize logger
Logger.init();

// attach logger to console
Logger.attach();

// capture unhandled exceptions
Logger.capture(unhandledExceptionHandler);

document.on("ready", function() {
    // redirect logger output to plaintext
    Logger.plaintext(document.$("plaintext#logger"));

    // log sciter version
    console.debug(Utils.sciterInfo());

    // add support for F5 reload
    Utils.addReloadWindow();

    // close window on escape key press
    Utils.closeWindowOnEscape(Window.this);

    // center window on screen
    Utils.centerWindow(Window.this, "screen");

    // center window around position
    Utils.centerWindowXY(Window.this, 1200, 600);

    // bring window to front
    Utils.windowToFront(Window.this);

    // add minimize window shortcut
    Utils.minimizeWindowShortcut();

    // add keyboard shortcut
    Utils.addKeyboardShortcut(document, {
        key: "KeyM",
        ctrlKey: true,
    }, function(event) {
        console.log(Utils.keyStr(event) + " pressed");
        return false;
    });

    // create new window to test centering on parent
    new Window({
        parent: Window.this,
        url: __DIR__ + "window.htm",
        state: Window.WINDOW_SHOWN,
        alignment: 1,
    });

    // add key logger
    Utils.keyLogger(document, function(event) {
        console.log(Utils.keyStr(event) + " pressed");
        return false;
    });

    // dpi stuff
    console.line();
    console.log(`device DPI = pixels in 1 inch - ${Utils.devicePixels()}`);
    console.log(`device pixels in 1 cm - ${Utils.devicePixels("1cm")}`);
    console.log(`device pixels in 1 mm - ${Utils.devicePixels("1mm")}`);

    console.line();
    console.log(`what is 96dip (1 inch) in ppx on a 142 DPI screen? - ${Utils.dip_ppx("96dip", 142)}`);
    console.log(`what is 142ppx in dip on a 142 DPI screen? - ${Utils.ppx_dip("142ppx", 142)}`);
    console.log(`what is 10cm in ppx on a 142 DPI screen? - ${Utils.mm_ppx("100mm", 142)}`);

    console.line();
    console.log(`monitors count - ${Utils.monitorsCount()}`);
    Utils.logMonitors();
    console.log(`window is on monitor - ${Window.this.screen + 1}`);

    console.line();

    // test sleep function
    console.log("Sleep for 500ms");
    Utils.sleep(500);

    // play sound
    const file = "C:\\Windows\\Media\\notify.wav";

    const promise = Utils.play(file);

    promise.then(
        function(success) {
            console.note("Play sound - OK");
        },
        function(error) {
            console.error("Play sound - FAILED");
        });

    // test json
    const json = {
        b: 1,
    };

    const url = __DIR__ + "test/test.json";

    Utils.loadJson(url, json);
    console.debug("loadJson", json);

    Utils.saveJson(url, json);

    // test file and dir exist
    const items = [
        ".gitignore",
        ".gitignore2",
        "bin",
        "bin2",
    ];

    for (const item of items)
        console.log(`file exists ${item}`, Utils.fileExists(item));

    for (const item of items)
        console.log(`dir exists ${item}`, Utils.dirExists(item));
});

document.on("click", "button#link", function(event, element) {
    Utils.openLink(element.attributes.href);
});

// window size in dpi
let a = [500, 200];

document.on("click", "button#resize", function(event, element) {
    // resize window
    Utils.setWindowDimensions(Window.this, a[0], a[1], false);

    a = Utils.windowDimensions(Window.this, false);

    console.log(a);
});

/**
 * Unhandled exception handler
 * @param {Error|string} error
 */
function unhandledExceptionHandler(error) {
    // log exception using exception if it exists, error otherwise
    typeof console.exception === "function" ? console.exception(error) : console.error(error);
}

</script>
</head>
<body>
    <button href="https://duckduckgo.com" #link>search</button>
    <button #resize>resize window</button>
    <plaintext #logger readonly />
</body>
</html>
